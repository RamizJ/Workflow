<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WorkflowService</name>
    </assembly>
    <members>
        <member name="T:WorkflowService.Common.SortType">
            <inheritdoc />
        </member>
        <member name="T:WorkflowService.Controllers.Abstract.IGoalsController">
            <summary>
            API for working with goals
            </summary>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGoalsController.Get(System.Int32)">
            <summary>
            Get goal
            </summary>
            <param name="id">goal id</param>
            <returns>goal data. Returned only if available for authenticated user</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGoalsController.GetAll">
            <summary>
            Get all goals
            </summary>
            <returns>Collection of goals</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGoalsController.GetPage(System.Int32,System.Int32,System.String,System.String,WorkflowService.Common.SortType,System.String)">
            <summary>
            Get goals with pagination, filtering and sorting
            </summary>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter string</param>
            <param name="filterFields">Fields by which result rows will be filtered. Serparator is "|"</param>
            <param name="sort">Sort type. 0 - Unspecified, 1 - Ascending, 2 - Descending</param>
            <param name="sortedFields">Fields by which result rows will be sorted. Serparator is "|"</param>
            <returns>Collection of goals</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGoalsController.GetRange(System.Int32[])">
            <summary>
            Get goals collection by ids
            </summary>
            <param name="goalIds"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGoalsController.Create(Workflow.VM.ViewModels.VmGoal)">
            <summary>
            Create goal
            </summary>
            <param name="goal">New goal</param>
            <returns>goal data with updated goal id</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGoalsController.Update(Workflow.VM.ViewModels.VmGoal)">
            <summary>
            Update goal
            </summary>
            <param name="goal">Updated goal</param>
            <returns>Nothin</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGoalsController.Delete(System.Int32)">
            <summary>
            Delete goal
            </summary>
            <param name="id">goal id</param>
            <returns></returns>
        </member>
        <member name="T:WorkflowService.Controllers.Abstract.IGroupsController">
            <summary>
            API for working with groups
            </summary>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGroupsController.Get(System.Int32)">
            <summary>
            Get group
            </summary>
            <param name="id">group id</param>
            <returns>group data. Returned only if available for authenticated user</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGroupsController.GetAll">
            <summary>
            Get all groups
            </summary>
            <returns>Collection of groups</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGroupsController.GetRange(System.Int32[])">
            <summary>
            Get groups collection by ids
            </summary>
            <param name="groupIds"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGroupsController.Create(Workflow.VM.ViewModels.VmGroup)">
            <summary>
            Create group
            </summary>
            <param name="group">New group</param>
            <returns>group data with updated group id</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGroupsController.Update(Workflow.VM.ViewModels.VmGroup)">
            <summary>
            Update group
            </summary>
            <param name="group">Updated group</param>
            <returns>Nothin</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IGroupsController.Delete(System.Int32)">
            <summary>
            Delete group
            </summary>
            <param name="id">group id</param>
            <returns></returns>
        </member>
        <member name="T:WorkflowService.Controllers.Abstract.IScopesController">
            <summary>
            API for working with scopes of goals
            </summary>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IScopesController.Get(System.Int32)">
            <summary>
            Get scope of goals
            </summary>
            <param name="id">Scope id</param>
            <returns>Scope data. Returned only if available for authenticated user</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IScopesController.GetAll">
            <summary>
            Get all scopes of goals
            </summary>
            <returns>Collection of scopes</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IScopesController.GetRange(System.Int32,System.Int32,System.String,System.String,WorkflowService.Common.SortType,System.String)">
            <summary>
            Get scopes of goals with pagination, filtering and sorting
            </summary>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter string</param>
            <param name="filterFields">Fields by which result rows will be filtered. Serparator is "|"</param>
            <param name="sort">Sort type. 0 - Unspecified, 1 - Ascending, 2 - Descending</param>
            <param name="sortedFields">Fields by which result rows will be sorted. Serparator is "|"</param>
            <returns>Collection of scopes</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IScopesController.Create(Workflow.VM.ViewModels.VmScope)">
            <summary>
            Create scope
            </summary>
            <param name="scope">New scope</param>
            <returns>Scope data with updated scope id</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IScopesController.Update(Workflow.VM.ViewModels.VmScope)">
            <summary>
            Update scope
            </summary>
            <param name="scope">Updated scope</param>
            <returns>Nothin</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IScopesController.Delete(System.Int32)">
            <summary>
            Delete scope
            </summary>
            <param name="id">Scope id</param>
            <returns></returns>
        </member>
        <member name="T:WorkflowService.Controllers.Abstract.ITeamsController">
            <summary>
            API for working with teams
            </summary>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.ITeamsController.Get(System.Int32)">
            <summary>
            Get team
            </summary>
            <param name="id">team id</param>
            <returns>team data. Returned only if available for authenticated user</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.ITeamsController.GetAll">
            <summary>
            Get all teams
            </summary>
            <returns>Collection of teams</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.ITeamsController.GetPage(System.Int32,System.Int32,System.String,System.String,WorkflowService.Common.SortType,System.String)">
            <summary>
            Get teams with pagination, filtering and sorting
            </summary>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="filter">Filter string</param>
            <param name="filterFields">Fields by which result rows will be filtered. Serparator is "|"</param>
            <param name="sort">Sort type. 0 - Unspecified, 1 - Ascending, 2 - Descending</param>
            <param name="sortedFields">Fields by which result rows will be sorted. Serparator is "|"</param>
            <returns>Collection of teams</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.ITeamsController.GetRange(System.Int32[])">
            <summary>
            Get teams collection by ids
            </summary>
            <param name="teamIds"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.ITeamsController.Create(Workflow.VM.ViewModels.VmTeam)">
            <summary>
            Create team
            </summary>
            <param name="team">New team</param>
            <returns>team data with updated team id</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.ITeamsController.Update(Workflow.VM.ViewModels.VmTeam)">
            <summary>
            Update team
            </summary>
            <param name="team">Updated team</param>
            <returns>Nothin</returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.ITeamsController.Delete(System.Int32)">
            <summary>
            Delete team
            </summary>
            <param name="id">team id</param>
            <returns></returns>
        </member>
        <member name="T:WorkflowService.Controllers.Abstract.IUsersController">
            <summary>
            
            </summary>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IUsersController.Get(System.String)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IUsersController.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IUsersController.GetPage(System.Int32,System.Int32,System.String,System.String,WorkflowService.Common.SortType,System.String)">
            <summary>
            
            </summary>
            <param name="pageNumber">Number of page</param>
            <param name="pageSize">Size of page</param>
            <param name="filter"></param>
            <param name="filterFields"></param>
            <param name="sort"></param>
            <param name="sortedFields"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IUsersController.GetRange(System.String[])">
            <summary>
            Get users collection by ids
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IUsersController.Create(Workflow.VM.ViewModels.VmUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IUsersController.Update(Workflow.VM.ViewModels.VmUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Controllers.Abstract.IUsersController.Delete(System.String)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:WorkflowService.Controllers.AuthenticationController">
            <summary>
            
            </summary>
        </member>
        <member name="M:WorkflowService.Controllers.AuthenticationController.#ctor(WorkflowService.Services.Abstract.IAuthenticationService)">
            <summary>
            Constructor
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:WorkflowService.Controllers.AuthenticationController.Login(Workflow.VM.ViewModels.VmAuthInput)">
            <summary>
            Login to the system
            </summary>
            <param name="input">Authentication data</param>
            <returns>Token and user info</returns>
        </member>
        <member name="M:WorkflowService.Controllers.AuthenticationController.Logout">
            <summary>
            Logout from the system
            </summary>
            <returns></returns>
        </member>
        <member name="T:WorkflowService.Controllers.GoalsController">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGoalsController" />
        </member>
        <member name="M:WorkflowService.Controllers.GoalsController.Get(System.Int32)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGoalsController" />
        </member>
        <member name="M:WorkflowService.Controllers.GoalsController.GetAll">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGoalsController" />
        </member>
        <member name="M:WorkflowService.Controllers.GoalsController.GetPage(System.Int32,System.Int32,System.String,System.String,WorkflowService.Common.SortType,System.String)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGoalsController" />
        </member>
        <member name="M:WorkflowService.Controllers.GoalsController.GetRange(System.Int32[])">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGoalsController" />
        </member>
        <member name="M:WorkflowService.Controllers.GoalsController.Create(Workflow.VM.ViewModels.VmGoal)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGoalsController" />
        </member>
        <member name="M:WorkflowService.Controllers.GoalsController.Update(Workflow.VM.ViewModels.VmGoal)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGoalsController" />
        </member>
        <member name="M:WorkflowService.Controllers.GoalsController.Delete(System.Int32)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGoalsController" />
        </member>
        <member name="T:WorkflowService.Controllers.GroupsController">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGroupsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.GroupsController.Get(System.Int32)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGroupsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.GroupsController.GetAll">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGroupsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.GroupsController.GetRange(System.Int32[])">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGroupsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.GroupsController.Create(Workflow.VM.ViewModels.VmGroup)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGroupsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.GroupsController.Update(Workflow.VM.ViewModels.VmGroup)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGroupsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.GroupsController.Delete(System.Int32)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IGroupsController"/>
        </member>
        <member name="T:WorkflowService.Controllers.ScopesController">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IScopesController"/>
        </member>
        <member name="M:WorkflowService.Controllers.ScopesController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Workflow.DAL.Models.ApplicationUser},WorkflowService.Services.Abstract.IScopesService)">
            <summary>
            Constructor
            </summary>
            <param name="userManager"></param>
            <param name="scopesService"></param>
        </member>
        <member name="M:WorkflowService.Controllers.ScopesController.Get(System.Int32)">
            <inheritdoc cref="M:WorkflowService.Controllers.Abstract.IScopesController.Get(System.Int32)"/>
        </member>
        <member name="T:WorkflowService.Controllers.TeamsController">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.ITeamsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.TeamsController.Get(System.Int32)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.ITeamsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.TeamsController.GetAll">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.ITeamsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.TeamsController.GetPage(System.Int32,System.Int32,System.String,System.String,WorkflowService.Common.SortType,System.String)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.ITeamsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.TeamsController.GetRange(System.Int32[])">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.ITeamsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.TeamsController.Create(Workflow.VM.ViewModels.VmTeam)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.ITeamsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.TeamsController.Update(Workflow.VM.ViewModels.VmTeam)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.ITeamsController"/>
        </member>
        <member name="M:WorkflowService.Controllers.TeamsController.Delete(System.Int32)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.ITeamsController"/>
        </member>
        <member name="T:WorkflowService.Controllers.UsersController">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IUsersController" />
        </member>
        <member name="M:WorkflowService.Controllers.UsersController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Workflow.DAL.Models.ApplicationUser},WorkflowService.Services.Abstract.IUsersService)">
            <summary>
            Constructor
            </summary>
            <param name="userManager"></param>
            <param name="usersService"></param>
        </member>
        <member name="M:WorkflowService.Controllers.UsersController.Get(System.String)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IUsersController" />
        </member>
        <member name="M:WorkflowService.Controllers.UsersController.GetAll">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IUsersController" />
        </member>
        <member name="M:WorkflowService.Controllers.UsersController.GetPage(System.Int32,System.Int32,System.String,System.String,WorkflowService.Common.SortType,System.String)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IUsersController" />
        </member>
        <member name="M:WorkflowService.Controllers.UsersController.GetRange(System.String[])">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IUsersController" />
        </member>
        <member name="M:WorkflowService.Controllers.UsersController.Create(Workflow.VM.ViewModels.VmUser)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IUsersController" />
        </member>
        <member name="M:WorkflowService.Controllers.UsersController.Update(Workflow.VM.ViewModels.VmUser)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IUsersController" />
        </member>
        <member name="M:WorkflowService.Controllers.UsersController.Delete(System.String)">
            <inheritdoc cref="T:WorkflowService.Controllers.Abstract.IUsersController" />
        </member>
        <member name="T:WorkflowService.Services.Abstract.IScopesService">
            <summary>
            
            </summary>
        </member>
        <member name="M:WorkflowService.Services.Abstract.IScopesService.GetScope(Workflow.DAL.Models.ApplicationUser,System.Int32)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Services.Abstract.IScopesService.GetScopes(Workflow.DAL.Models.ApplicationUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Services.Abstract.IScopesService.CreateScope(Workflow.DAL.Models.ApplicationUser,Workflow.VM.ViewModels.VmScope)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Services.Abstract.IScopesService.UpdateScope(Workflow.DAL.Models.ApplicationUser,Workflow.VM.ViewModels.VmScope)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Services.Abstract.IScopesService.DeleteScope(Workflow.DAL.Models.ApplicationUser,System.Int32)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="scopeId"></param>
            <returns></returns>
        </member>
        <member name="M:WorkflowService.Services.Abstract.IScopesService.GetScopes(Workflow.DAL.Models.ApplicationUser,System.Int32,System.Int32,System.String,System.String,WorkflowService.Common.SortType,System.String)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <param name="filteredFields"></param>
            <param name="sort"></param>
            <param name="sortedFields"></param>
            <returns></returns>
        </member>
        <member name="T:WorkflowService.Services.GoalsService">
            <inheritdoc />
        </member>
        <member name="T:WorkflowService.Services.ScopesService">
            <inheritdoc />
        </member>
        <member name="M:WorkflowService.Services.ScopesService.#ctor(Workflow.DAL.DataContext)">
            <summary>
            Database context
            </summary>
            <param name="dataContext"></param>
        </member>
        <member name="M:WorkflowService.Services.ScopesService.GetScope(Workflow.DAL.Models.ApplicationUser,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WorkflowService.Services.ScopesService.GetScopes(Workflow.DAL.Models.ApplicationUser)">
            <inheritdoc />
        </member>
        <member name="M:WorkflowService.Services.ScopesService.GetScopes(Workflow.DAL.Models.ApplicationUser,System.Int32,System.Int32,System.String,System.String,WorkflowService.Common.SortType,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WorkflowService.Services.ScopesService.CreateScope(Workflow.DAL.Models.ApplicationUser,Workflow.VM.ViewModels.VmScope)">
            <inheritdoc />
        </member>
        <member name="M:WorkflowService.Services.ScopesService.UpdateScope(Workflow.DAL.Models.ApplicationUser,Workflow.VM.ViewModels.VmScope)">
            <inheritdoc />
        </member>
        <member name="M:WorkflowService.Services.ScopesService.DeleteScope(Workflow.DAL.Models.ApplicationUser,System.Int32)">
            <inheritdoc />
        </member>
    </members>
</doc>
